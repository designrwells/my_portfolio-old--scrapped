{"ast":null,"code":"/*!\r\n * MotionPathPlugin 3.1.1\r\n * https://greensock.com\r\n *\r\n * @license Copyright 2008-2020, GreenSock. All rights reserved.\r\n * Subject to the terms at https://greensock.com/standard-license or for\r\n * Club GreenSock members, the agreement issued with that membership.\r\n * @author: Jack Doyle, jack@greensock.com\r\n*/\n\n/* eslint-disable */\nimport { getRawPath, cacheRawPathMeasurements, getPositionOnPath, pointsToSegment, flatPointsToSegment, sliceRawPath, stringToRawPath, rawPathToString, transformRawPath, convertToPath as _convertToPath } from \"./utils/paths.js\";\nimport { getGlobalMatrix } from \"./utils/matrix.js\";\n\nvar _xProps = [\"x\", \"translateX\", \"left\", \"marginLeft\"],\n    _yProps = [\"y\", \"translateY\", \"top\", \"marginTop\"],\n    _DEG2RAD = Math.PI / 180,\n    gsap,\n    PropTween,\n    _getUnit,\n    _toArray,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _populateSegmentFromArray = function _populateSegmentFromArray(segment, values, property, mode) {\n  //mode: 0 = x but don't fill y yet, 1 = y.\n  var l = values.length,\n      si = mode,\n      i = 0;\n\n  for (; i < l; i++) {\n    segment[si] = parseFloat(values[i][property]);\n    si += 2;\n  }\n\n  return segment;\n},\n    _getPropNum = function _getPropNum(target, prop, unit) {\n  return parseFloat(target._gsap.get(target, prop, unit || \"px\")) || 0;\n},\n    _relativize = function _relativize(segment) {\n  var x = segment[0],\n      y = segment[1],\n      i;\n\n  for (i = 2; i < segment.length; i += 2) {\n    x = segment[i] += x;\n    y = segment[i + 1] += y;\n  }\n},\n    _segmentToRawPath = function _segmentToRawPath(plugin, segment, target, x, y, slicer, vars) {\n  if (vars.type === \"cubic\") {\n    segment = [segment];\n  } else {\n    segment.unshift(_getPropNum(target, x, vars.unitX), y ? _getPropNum(target, y, vars.unitY) : 0);\n\n    if (vars.relative) {\n      _relativize(segment);\n    }\n\n    var pointFunc = y ? pointsToSegment : flatPointsToSegment;\n    segment = [pointFunc(segment, vars.curviness)];\n  }\n\n  segment = slicer(_align(segment, target, vars));\n\n  _addDimensionalPropTween(plugin, target, x, segment, \"x\", vars.unitX);\n\n  if (y) {\n    _addDimensionalPropTween(plugin, target, y, segment, \"y\", vars.unitY);\n  }\n\n  return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.\n},\n    _emptyFunc = function _emptyFunc(v) {\n  return v;\n},\n    _align = function _align(rawPath, target, _ref) {\n  var align = _ref.align,\n      matrix = _ref.matrix,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY;\n  var x, y, tween, targetMatrix, alignTarget, alignPath, alignMatrix, invertedMatrix, tx, ty, m;\n\n  if (!rawPath || !rawPath.length) {\n    return getRawPath(\"M0,0L0,0\");\n  }\n\n  if (align) {\n    if (align === \"self\" || (alignTarget = _toArray(align)[0] || target) === target) {\n      x = _getPropNum(target, \"x\") - rawPath[0][0];\n      y = _getPropNum(target, \"y\") - rawPath[0][1];\n      transformRawPath(rawPath, 1, 0, 0, 1, x, y);\n    } else {\n      tween = gsap.to(target, {\n        xPercent: 0,\n        yPercent: 0,\n        x: 0,\n        y: 0,\n        scale: 1,\n        rotation: 0,\n        skewX: 0,\n        skewY: 0\n      }).progress(1); //get rid of transforms, otherwise they'll throw off the measurements.\n\n      targetMatrix = getGlobalMatrix(target); //we cannot use something like getScreenCTM() because of a major bug in Firefox that has existed for years and prevents values from being reported correctly when an ancestor element has transforms applied. Our proprietary getGlobalMatrix() works across all browsers.\n\n      tween.render(-1).kill();\n\n      if (alignTarget.getTotalLength && alignTarget.tagName.toLowerCase() === \"path\") {\n        //path\n        alignPath = getRawPath(alignTarget);\n        alignMatrix = getGlobalMatrix(alignTarget.parentNode);\n        m = alignTarget.transform;\n        m = m && m.baseVal.length && m.baseVal.consolidate().matrix || {\n          e: 0,\n          f: 0\n        };\n        x = alignPath[0][0] + m.e;\n        y = alignPath[0][1] + m.f;\n      } else {\n        alignMatrix = getGlobalMatrix(alignTarget);\n        x = 0;\n        y = 0;\n      }\n\n      tx = alignMatrix.a * x + alignMatrix.c * y + alignMatrix.e - targetMatrix.e;\n      ty = alignMatrix.b * x + alignMatrix.d * y + alignMatrix.f - targetMatrix.f;\n      invertedMatrix = getGlobalMatrix(target.parentNode, true);\n      x = invertedMatrix.a * tx + invertedMatrix.c * ty;\n      y = invertedMatrix.b * tx + invertedMatrix.d * ty;\n      tx = rawPath[0][0];\n      ty = rawPath[0][1];\n      alignMatrix.multiply(invertedMatrix);\n      x -= alignMatrix.a * tx + alignMatrix.c * ty;\n      y -= alignMatrix.b * tx + alignMatrix.d * ty;\n      transformRawPath(rawPath, alignMatrix.a, alignMatrix.b, alignMatrix.c, alignMatrix.d, x, y);\n    }\n  }\n\n  if (matrix) {\n    transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n  } else if (offsetX || offsetY) {\n    transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);\n  }\n\n  return rawPath;\n},\n    _addDimensionalPropTween = function _addDimensionalPropTween(plugin, target, property, rawPath, pathProperty, forceUnit) {\n  var cache = target._gsap,\n      harness = cache.harness,\n      prop = harness && harness.aliases && harness.aliases[property] || property,\n      pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));\n  pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;\n  pt.path = rawPath;\n  pt.pp = pathProperty;\n\n  plugin._props.push(prop);\n},\n    _sliceModifier = function _sliceModifier(start, end) {\n  return function (rawPath) {\n    return start || end !== 1 ? sliceRawPath(rawPath, start, end) : rawPath;\n  };\n};\n\nexport var MotionPathPlugin = {\n  version: \"3.1.1\",\n  name: \"motionPath\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n    _getUnit = gsap.utils.getUnit;\n    _toArray = gsap.utils.toArray;\n    PropTween = propTween;\n  },\n  init: function init(target, vars, tween, index, targets) {\n    if (!gsap) {\n      console.warn(\"Please gsap.registerPlugin(MotionPathPlugin)\");\n      return false;\n    }\n\n    if (!(typeof vars === \"object\" && !vars.style) || !vars.path) {\n      vars = {\n        path: vars\n      };\n    }\n\n    var rawPaths = [],\n        path = vars.path,\n        firstObj = path[0],\n        autoRotate = vars.autoRotate,\n        slicer = _sliceModifier(vars.start, \"end\" in vars ? vars.end : 1),\n        rawPath,\n        p,\n        x,\n        y;\n\n    this.rawPaths = rawPaths;\n    this.target = target;\n\n    if (this.rotate = autoRotate || autoRotate === 0) {\n      //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.\n      this.rOffset = parseFloat(autoRotate) || 0;\n      this.radians = !!vars.useRadians;\n      this.rProp = vars.rotation || \"rotation\"; // rotation property\n\n      this.rSet = target._gsap.set(target, this.rProp, this); // rotation setter\n\n      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0; // rotation units\n    }\n\n    if (Array.isArray(path) && !(\"closed\" in path) && typeof firstObj !== \"number\") {\n      for (p in firstObj) {\n        if (~_xProps.indexOf(p)) {\n          x = p;\n        } else if (~_yProps.indexOf(p)) {\n          y = p;\n        }\n      }\n\n      if (x && y) {\n        //correlated values\n        rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, vars.x || x, vars.y || y, slicer, vars));\n      } else {\n        x = y = 0;\n      }\n\n      for (p in firstObj) {\n        if (p !== x && p !== y) {\n          rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 0), target, p, 0, slicer, vars));\n        }\n      }\n    } else {\n      rawPath = slicer(_align(getRawPath(vars.path), target, vars));\n      cacheRawPathMeasurements(rawPath, vars.resolution);\n      rawPaths.push(rawPath);\n\n      _addDimensionalPropTween(this, target, vars.x || \"x\", rawPath, \"x\", vars.unitX || \"px\");\n\n      _addDimensionalPropTween(this, target, vars.y || \"y\", rawPath, \"y\", vars.unitY || \"px\");\n    }\n  },\n  render: function render(ratio, data) {\n    var rawPaths = data.rawPaths,\n        i = rawPaths.length,\n        pt = data._pt;\n\n    if (ratio > 1) {\n      ratio = 1;\n    } else if (ratio < 0) {\n      ratio = 0;\n    }\n\n    while (i--) {\n      getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);\n    }\n\n    while (pt) {\n      pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);\n      pt = pt._next;\n    }\n\n    if (data.rotate) {\n      data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);\n    }\n  },\n  getLength: function getLength(path) {\n    return cacheRawPathMeasurements(getRawPath(path)).totalLength;\n  },\n  sliceRawPath: sliceRawPath,\n  getRawPath: getRawPath,\n  pointsToSegment: pointsToSegment,\n  stringToRawPath: stringToRawPath,\n  rawPathToString: rawPathToString,\n  transformRawPath: transformRawPath,\n  convertToPath: function convertToPath(targets, swap) {\n    return _toArray(targets).map(function (target) {\n      return _convertToPath(target, swap !== false);\n    });\n  },\n  getGlobalMatrix: getGlobalMatrix,\n  getPositionOnPath: getPositionOnPath,\n  cacheRawPathMeasurements: cacheRawPathMeasurements,\n  arrayToRawPath: function arrayToRawPath(value, vars) {\n    vars = vars || {};\n\n    var segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || \"x\", 0), value, vars.y || \"y\", 1);\n\n    if (vars.relative) {\n      _relativize(segment);\n    }\n\n    return [vars.type === \"cubic\" ? segment : pointsToSegment(segment, vars.curviness)];\n  }\n};\n_getGSAP() && gsap.registerPlugin(MotionPathPlugin);\nexport { MotionPathPlugin as default };","map":{"version":3,"sources":["C:/Users/iceme/Desktop/my_portfolio/node_modules/gsap/MotionPathPlugin.js"],"names":["getRawPath","cacheRawPathMeasurements","getPositionOnPath","pointsToSegment","flatPointsToSegment","sliceRawPath","stringToRawPath","rawPathToString","transformRawPath","convertToPath","_convertToPath","getGlobalMatrix","_xProps","_yProps","_DEG2RAD","Math","PI","gsap","PropTween","_getUnit","_toArray","_getGSAP","window","registerPlugin","_populateSegmentFromArray","segment","values","property","mode","l","length","si","i","parseFloat","_getPropNum","target","prop","unit","_gsap","get","_relativize","x","y","_segmentToRawPath","plugin","slicer","vars","type","unshift","unitX","unitY","relative","pointFunc","curviness","_align","_addDimensionalPropTween","resolution","_emptyFunc","v","rawPath","_ref","align","matrix","offsetX","offsetY","tween","targetMatrix","alignTarget","alignPath","alignMatrix","invertedMatrix","tx","ty","m","to","xPercent","yPercent","scale","rotation","skewX","skewY","progress","render","kill","getTotalLength","tagName","toLowerCase","parentNode","transform","baseVal","consolidate","e","f","a","c","b","d","multiply","pathProperty","forceUnit","cache","harness","aliases","pt","_pt","set","u","path","pp","_props","push","_sliceModifier","start","end","MotionPathPlugin","version","name","register","core","Plugin","propTween","utils","getUnit","toArray","init","index","targets","console","warn","style","rawPaths","firstObj","autoRotate","p","rotate","rOffset","radians","useRadians","rProp","rSet","ru","Array","isArray","indexOf","ratio","data","t","_next","angle","getLength","totalLength","swap","map","arrayToRawPath","value","default"],"mappings":"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","sourcesContent":["/*!\r\n * MotionPathPlugin 3.1.1\r\n * https://greensock.com\r\n *\r\n * @license Copyright 2008-2020, GreenSock. All rights reserved.\r\n * Subject to the terms at https://greensock.com/standard-license or for\r\n * Club GreenSock members, the agreement issued with that membership.\r\n * @author: Jack Doyle, jack@greensock.com\r\n*/\r\n\r\n/* eslint-disable */\r\nimport { getRawPath, cacheRawPathMeasurements, getPositionOnPath, pointsToSegment, flatPointsToSegment, sliceRawPath, stringToRawPath, rawPathToString, transformRawPath, convertToPath as _convertToPath } from \"./utils/paths.js\";\r\nimport { getGlobalMatrix } from \"./utils/matrix.js\";\r\n\r\nvar _xProps = [\"x\", \"translateX\", \"left\", \"marginLeft\"],\r\n    _yProps = [\"y\", \"translateY\", \"top\", \"marginTop\"],\r\n    _DEG2RAD = Math.PI / 180,\r\n    gsap,\r\n    PropTween,\r\n    _getUnit,\r\n    _toArray,\r\n    _getGSAP = function _getGSAP() {\r\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\r\n},\r\n    _populateSegmentFromArray = function _populateSegmentFromArray(segment, values, property, mode) {\r\n  //mode: 0 = x but don't fill y yet, 1 = y.\r\n  var l = values.length,\r\n      si = mode,\r\n      i = 0;\r\n\r\n  for (; i < l; i++) {\r\n    segment[si] = parseFloat(values[i][property]);\r\n    si += 2;\r\n  }\r\n\r\n  return segment;\r\n},\r\n    _getPropNum = function _getPropNum(target, prop, unit) {\r\n  return parseFloat(target._gsap.get(target, prop, unit || \"px\")) || 0;\r\n},\r\n    _relativize = function _relativize(segment) {\r\n  var x = segment[0],\r\n      y = segment[1],\r\n      i;\r\n\r\n  for (i = 2; i < segment.length; i += 2) {\r\n    x = segment[i] += x;\r\n    y = segment[i + 1] += y;\r\n  }\r\n},\r\n    _segmentToRawPath = function _segmentToRawPath(plugin, segment, target, x, y, slicer, vars) {\r\n  if (vars.type === \"cubic\") {\r\n    segment = [segment];\r\n  } else {\r\n    segment.unshift(_getPropNum(target, x, vars.unitX), y ? _getPropNum(target, y, vars.unitY) : 0);\r\n\r\n    if (vars.relative) {\r\n      _relativize(segment);\r\n    }\r\n\r\n    var pointFunc = y ? pointsToSegment : flatPointsToSegment;\r\n    segment = [pointFunc(segment, vars.curviness)];\r\n  }\r\n\r\n  segment = slicer(_align(segment, target, vars));\r\n\r\n  _addDimensionalPropTween(plugin, target, x, segment, \"x\", vars.unitX);\r\n\r\n  if (y) {\r\n    _addDimensionalPropTween(plugin, target, y, segment, \"y\", vars.unitY);\r\n  }\r\n\r\n  return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.\r\n},\r\n    _emptyFunc = function _emptyFunc(v) {\r\n  return v;\r\n},\r\n    _align = function _align(rawPath, target, _ref) {\r\n  var align = _ref.align,\r\n      matrix = _ref.matrix,\r\n      offsetX = _ref.offsetX,\r\n      offsetY = _ref.offsetY;\r\n  var x, y, tween, targetMatrix, alignTarget, alignPath, alignMatrix, invertedMatrix, tx, ty, m;\r\n\r\n  if (!rawPath || !rawPath.length) {\r\n    return getRawPath(\"M0,0L0,0\");\r\n  }\r\n\r\n  if (align) {\r\n    if (align === \"self\" || (alignTarget = _toArray(align)[0] || target) === target) {\r\n      x = _getPropNum(target, \"x\") - rawPath[0][0];\r\n      y = _getPropNum(target, \"y\") - rawPath[0][1];\r\n      transformRawPath(rawPath, 1, 0, 0, 1, x, y);\r\n    } else {\r\n      tween = gsap.to(target, {\r\n        xPercent: 0,\r\n        yPercent: 0,\r\n        x: 0,\r\n        y: 0,\r\n        scale: 1,\r\n        rotation: 0,\r\n        skewX: 0,\r\n        skewY: 0\r\n      }).progress(1); //get rid of transforms, otherwise they'll throw off the measurements.\r\n\r\n      targetMatrix = getGlobalMatrix(target); //we cannot use something like getScreenCTM() because of a major bug in Firefox that has existed for years and prevents values from being reported correctly when an ancestor element has transforms applied. Our proprietary getGlobalMatrix() works across all browsers.\r\n\r\n      tween.render(-1).kill();\r\n\r\n      if (alignTarget.getTotalLength && alignTarget.tagName.toLowerCase() === \"path\") {\r\n        //path\r\n        alignPath = getRawPath(alignTarget);\r\n        alignMatrix = getGlobalMatrix(alignTarget.parentNode);\r\n        m = alignTarget.transform;\r\n        m = m && m.baseVal.length && m.baseVal.consolidate().matrix || {\r\n          e: 0,\r\n          f: 0\r\n        };\r\n        x = alignPath[0][0] + m.e;\r\n        y = alignPath[0][1] + m.f;\r\n      } else {\r\n        alignMatrix = getGlobalMatrix(alignTarget);\r\n        x = 0;\r\n        y = 0;\r\n      }\r\n\r\n      tx = alignMatrix.a * x + alignMatrix.c * y + alignMatrix.e - targetMatrix.e;\r\n      ty = alignMatrix.b * x + alignMatrix.d * y + alignMatrix.f - targetMatrix.f;\r\n      invertedMatrix = getGlobalMatrix(target.parentNode, true);\r\n      x = invertedMatrix.a * tx + invertedMatrix.c * ty;\r\n      y = invertedMatrix.b * tx + invertedMatrix.d * ty;\r\n      tx = rawPath[0][0];\r\n      ty = rawPath[0][1];\r\n      alignMatrix.multiply(invertedMatrix);\r\n      x -= alignMatrix.a * tx + alignMatrix.c * ty;\r\n      y -= alignMatrix.b * tx + alignMatrix.d * ty;\r\n      transformRawPath(rawPath, alignMatrix.a, alignMatrix.b, alignMatrix.c, alignMatrix.d, x, y);\r\n    }\r\n  }\r\n\r\n  if (matrix) {\r\n    transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\r\n  } else if (offsetX || offsetY) {\r\n    transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);\r\n  }\r\n\r\n  return rawPath;\r\n},\r\n    _addDimensionalPropTween = function _addDimensionalPropTween(plugin, target, property, rawPath, pathProperty, forceUnit) {\r\n  var cache = target._gsap,\r\n      harness = cache.harness,\r\n      prop = harness && harness.aliases && harness.aliases[property] || property,\r\n      pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));\r\n  pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;\r\n  pt.path = rawPath;\r\n  pt.pp = pathProperty;\r\n\r\n  plugin._props.push(prop);\r\n},\r\n    _sliceModifier = function _sliceModifier(start, end) {\r\n  return function (rawPath) {\r\n    return start || end !== 1 ? sliceRawPath(rawPath, start, end) : rawPath;\r\n  };\r\n};\r\n\r\nexport var MotionPathPlugin = {\r\n  version: \"3.1.1\",\r\n  name: \"motionPath\",\r\n  register: function register(core, Plugin, propTween) {\r\n    gsap = core;\r\n    _getUnit = gsap.utils.getUnit;\r\n    _toArray = gsap.utils.toArray;\r\n    PropTween = propTween;\r\n  },\r\n  init: function init(target, vars, tween, index, targets) {\r\n    if (!gsap) {\r\n      console.warn(\"Please gsap.registerPlugin(MotionPathPlugin)\");\r\n      return false;\r\n    }\r\n\r\n    if (!(typeof vars === \"object\" && !vars.style) || !vars.path) {\r\n      vars = {\r\n        path: vars\r\n      };\r\n    }\r\n\r\n    var rawPaths = [],\r\n        path = vars.path,\r\n        firstObj = path[0],\r\n        autoRotate = vars.autoRotate,\r\n        slicer = _sliceModifier(vars.start, \"end\" in vars ? vars.end : 1),\r\n        rawPath,\r\n        p,\r\n        x,\r\n        y;\r\n\r\n    this.rawPaths = rawPaths;\r\n    this.target = target;\r\n\r\n    if (this.rotate = autoRotate || autoRotate === 0) {\r\n      //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.\r\n      this.rOffset = parseFloat(autoRotate) || 0;\r\n      this.radians = !!vars.useRadians;\r\n      this.rProp = vars.rotation || \"rotation\"; // rotation property\r\n\r\n      this.rSet = target._gsap.set(target, this.rProp, this); // rotation setter\r\n\r\n      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0; // rotation units\r\n    }\r\n\r\n    if (Array.isArray(path) && !(\"closed\" in path) && typeof firstObj !== \"number\") {\r\n      for (p in firstObj) {\r\n        if (~_xProps.indexOf(p)) {\r\n          x = p;\r\n        } else if (~_yProps.indexOf(p)) {\r\n          y = p;\r\n        }\r\n      }\r\n\r\n      if (x && y) {\r\n        //correlated values\r\n        rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, vars.x || x, vars.y || y, slicer, vars));\r\n      } else {\r\n        x = y = 0;\r\n      }\r\n\r\n      for (p in firstObj) {\r\n        if (p !== x && p !== y) {\r\n          rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 0), target, p, 0, slicer, vars));\r\n        }\r\n      }\r\n    } else {\r\n      rawPath = slicer(_align(getRawPath(vars.path), target, vars));\r\n      cacheRawPathMeasurements(rawPath, vars.resolution);\r\n      rawPaths.push(rawPath);\r\n\r\n      _addDimensionalPropTween(this, target, vars.x || \"x\", rawPath, \"x\", vars.unitX || \"px\");\r\n\r\n      _addDimensionalPropTween(this, target, vars.y || \"y\", rawPath, \"y\", vars.unitY || \"px\");\r\n    }\r\n  },\r\n  render: function render(ratio, data) {\r\n    var rawPaths = data.rawPaths,\r\n        i = rawPaths.length,\r\n        pt = data._pt;\r\n\r\n    if (ratio > 1) {\r\n      ratio = 1;\r\n    } else if (ratio < 0) {\r\n      ratio = 0;\r\n    }\r\n\r\n    while (i--) {\r\n      getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);\r\n    }\r\n\r\n    while (pt) {\r\n      pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);\r\n      pt = pt._next;\r\n    }\r\n\r\n    if (data.rotate) {\r\n      data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);\r\n    }\r\n  },\r\n  getLength: function getLength(path) {\r\n    return cacheRawPathMeasurements(getRawPath(path)).totalLength;\r\n  },\r\n  sliceRawPath: sliceRawPath,\r\n  getRawPath: getRawPath,\r\n  pointsToSegment: pointsToSegment,\r\n  stringToRawPath: stringToRawPath,\r\n  rawPathToString: rawPathToString,\r\n  transformRawPath: transformRawPath,\r\n  convertToPath: function convertToPath(targets, swap) {\r\n    return _toArray(targets).map(function (target) {\r\n      return _convertToPath(target, swap !== false);\r\n    });\r\n  },\r\n  getGlobalMatrix: getGlobalMatrix,\r\n  getPositionOnPath: getPositionOnPath,\r\n  cacheRawPathMeasurements: cacheRawPathMeasurements,\r\n  arrayToRawPath: function arrayToRawPath(value, vars) {\r\n    vars = vars || {};\r\n\r\n    var segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || \"x\", 0), value, vars.y || \"y\", 1);\r\n\r\n    if (vars.relative) {\r\n      _relativize(segment);\r\n    }\r\n\r\n    return [vars.type === \"cubic\" ? segment : pointsToSegment(segment, vars.curviness)];\r\n  }\r\n};\r\n_getGSAP() && gsap.registerPlugin(MotionPathPlugin);\r\nexport { MotionPathPlugin as default };"]},"metadata":{},"sourceType":"module"}